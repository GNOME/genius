    <sect1 id="genius-gel-loops">
      <title>Loops</title>

      <sect2 id="genius-gel-loops-while">
        <title>While loops</title>
        <para>
Syntax:
<programlisting><![CDATA[while <expression1> do <expression2>
until <expression1> do <expression2>
do <expression2> while <expression1>
do <expression2> until <expression1>
]]></programlisting>
        </para>
        <para>
These are similiar to other languages, however they return the result of the last iteration or <command>NULL</command> if no iteration was done.  In the boolean expression, <command>=</command> is translated into <command>==</command> just as for the <command>if</command> statement.
        </para>
      </sect2>

      <sect2 id="genius-gel-loops-for">
        <title>For loops</title>
        <para>
Syntax:
<programlisting><![CDATA[for <identifier> = <from> to <to> do <body>
for <identifier> = <from> to <to> by <increment> do <body>
]]></programlisting>
        </para>
        <para>
Loop with identifier being set to all values from <command>&lt;from&gt;</command> to <command>&lt;to&gt;</command>, optionally using an increment other than 1. These are faster, nicer and more compact than the normal loops such as above, but less flexible. The identifier must be an identifier and can't be a dereference. The value of identifier is the last value of identifier, or <command>&lt;from&gt;</command> if body was never evaluated. The variable is guaranteed to be initialized after a loop, so you can safely use it.  Also the <command>&lt;from&gt;</command>, <command>&lt;to&gt;</command> and <command>&lt;increment&gt;</command> must be non complex values. The <command>&lt;to&gt;</command> is not guaranteed to be hit, but will never be overshot, for example the following prints out odd numbers from 1 to 19:
<programlisting>for i = 1 to 20 by 2 do print(i)
</programlisting>
        </para>
      </sect2>

      <sect2 id="genius-gel-loops-foreach">
        <title>Foreach loops</title>
        <para>
Syntax:
<programlisting><![CDATA[  for <identifier> in <matrix> do <body>
]]></programlisting>
        </para>
        <para>
For each element, going row by row from left to right do the body. To
print numbers 1,2,3 and 4 in this order you could do:
<programlisting>for n in [1,2:3,4] do print(n)
</programlisting>
        </para>
        <para>
If you wish to run through the rows and columns of a matrix, you can use
the RowsOf and ColumnsOf functions which return a vector of the rows or
columns of the matrix.  So,
<programlisting>for n in RowsOf ([1,2:3,4]) do print(n)
</programlisting>
will print out [1,2] and then [3,4].
        </para>
      </sect2>

      <sect2 id="genius-gel-loops-break-continue">
        <title>Break and continue</title>
        <para>
You can also use the <command>break</command> and <command>continue</command> commands in loops. The continue <command>continue</command> command will restart the current loop at its next iteration, while the <command>break</command> command exits the current loop.
<programlisting><![CDATA[while(<expression1>) do (
  if(<expression2>) break
  else if(<expression3>) continue;
  <expression4>
)
]]></programlisting>
        </para>
      </sect2>
    </sect1>
