
    <sect1 id="genius-gel-functions">
      <title>Using Functions</title>

      <para>
Syntax:
<programlisting>FunctionName([argument1, argument2, ...])
</programlisting>
Example:
<programlisting>Factorial(5)
cos(2*pi)
</programlisting>
      </para>

      <para>
To evaluate a function, enter the name of the function, followed by the arguments (if any) to the function in parentheses. This will return the result of applying the function to its arguments. The number of arguments to the function is, of course, different for each function.
      </para>

      <para>
There are many built-in functions, such as <command>sin</command>, <command>cos</command> and <command>tan</command>. You can use the <command>help</command> built-in function to get a list of available functions, or see <xref linkend="genius-gel-function-list" /> for a full listing.
      </para>

      <tip>
        <title>Using Tab completion</title>
        <para>
You can use Tab completion to get &appname; to complete function names for you. Try typing the first few letters of the name and pressing <userinput>Tab</userinput>.
        </para>
      </tip>

      <important>
        <title>Function names are case sensitive</title>
        <para>
The names of functions are case sensitive. That means that functions named <command>dosomething</command>, <command>DOSOMETHING</command> and <command>DoSomething</command> are all different functions.
        </para>
      </important>


      <sect2 id="genius-gel-functions-defining">
        <title>Defining functions</title>
        <para>
Syntax:
<programlisting><![CDATA[function <identifier>(<comma separated arguments>) = <function body>
<identifier> = (`() = <function body>)
]]></programlisting>
The <command>`</command> is the backquote character, and signifies an anonymous function. By setting it to a variable name you effectively define a function.
        </para>

        <para>
A function takes zero or more comma separated arguments, and returns the result of the function body. Defining your own functions is primarily a matter of convenience; one possible use is to have sets of functions defined in GEL files which &appname; can load in order to make available.
        </para>

        <para>
Example:
<programlisting>function addup(a,b,c) = a+b+c
</programlisting>
then <command>addup(1,4,9)</command> yields 14
        </para>
      </sect2>

      <sect2 id="genius-gel-functions-variable-argument-lists">
        <title>Variable argument lists</title>
        <para>
If you include <command>...</command> after the last argument name in the function declaration, then &appname; will allow any number of arguments to be passed in place of that argument. If no arguments were passed then that argument will be set to <command>null</command>. Otherwise, it will be a horizontal vector containing all the arguments. For example:
<programlisting>function f(a,b...) = b
</programlisting>
Then <command>f(1,2,3)</command> yields <command>[2,3]</command>, while <command>f(1)</command> yields <command>null</command>.
        </para>
      </sect2>


      <sect2 id="genius-gel-functions-passing-functions">
        <title>Passing functions to functions</title>

        <para>
In &appname;, it is possible to pass a function as an argument to another function. This can be done using either &lsquo;function nodes&rsquo; or anonymous functions.
        </para>

        <para>
If you do not enter the parentheses after a function name, instead of being evaluated, the function will instead be returned as a &lsquo;function node&rsquo;. The function node can then be passed to another function.
        </para>
        <para>
Example:
<programlisting>function f(a,b) = a(b)+1;
function b(x) = x*x;
f(b,2)
</programlisting>
        </para>

        <para>
If you want to pass a function that doesn&rsquo;t exist yet, you can use an anonymous function (see <xref linkend="genius-gel-functions-defining" />).
        </para>
        <para>
Syntax:
<programlisting><![CDATA[function(<comma separated arguments>) = <function body>
`(<comma separated arguments>) = <function body>
]]></programlisting>
        </para>
        <para>
Example:
<programlisting>function f(a,b) = a(b)+1;
f(`(x) = x*x,2)
</programlisting>
        </para>
      </sect2>


    <sect2 id="genius-gel-functions-operations">
      <title>Operations on functions</title>
      <para>
Some functions allow arithmetic operations, and some single argument functions such as <command>exp</command> or <command>ln</command>, to operate on the function. For example,
<programlisting>exp(sin*cos+4)
</programlisting>
will return a function that does
<programlisting>exp(sin(x)*cos(x)+4)
</programlisting>
This can be useful when quickly defining functions. For example to create a function to perform the above operation, you can just type:
<programlisting>f = exp(sin*cos+4)
</programlisting>
      </para>
      <para>
This can also be used in plotting. For example, to plot sin squared you can enter:
<programlisting>LinePlot(sin^2)
</programlisting>
      </para>

      <warning>
        <para>
Not all functions can be used in this way. In addition, when you use a binary operation the functions must take the same arguments. 
        </para>
      </warning>
    </sect2>


    </sect1>
