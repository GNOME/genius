AC_INIT(src/calc.c)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(genius,0.6.1)

dnl make sure we keep ACLOCAL_FLAGS around for maintainer builds to work
AC_SUBST(ACLOCAL_AMFLAGS, "$ACLOCAL_FLAGS")

AM_MAINTAINER_MODE

AC_PROG_INTLTOOL([0.21])

dnl ================= Requirements ================================================

VTE_REQUIRED=0.8.19
LIBGNOMEUI_REQUIRED=2.0.0
LIBGLADE_REQUIRED=1.99.2
LIBGNOME_REQUIRED=2.0.0
GTK_REQUIRED=2.0.0
GLIB_REQUIRED=2.0.0
GTKSOURCEVIEW_REQUIRED=0.3.0

dnl ===============================================================================

AC_PROG_CC
AC_ISC_POSIX
AC_HEADER_STDC
AM_PROG_LEX
AM_PROG_LIBTOOL
AC_PROG_YACC
AC_ARG_PROGRAM

GNOME_COMPILE_WARNINGS

AC_CHECK_FUNCS([setenv unsetenv clearenv])

dnl ================= Translation Stuf ==============================================

GETTEXT_PACKAGE=genius
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE")
AC_SUBST(GETTEXT_PACKAGE)

ALL_LINGUAS="az ca cs de el en_CA en_GB es fr ga hi hr it ko nl no pt pt_BR sr sr@Latn sv pl zh_CN"
AM_GLIB_GNU_GETTEXT

dnl ===============================================================================

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

# glib-genmarshal
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl Check for termcap
AC_CHECK_LIB(termcap, tgetent,[TERMCAP_LIB="-ltermcap"],
	     [AC_CHECK_LIB(ncurses, tgetent,
                           [TERMCAP_LIB="-lncurses"
                            AC_DEFINE(USE_NCURSES)
                            AC_CHECK_HEADER(ncurses/curses.h, [
					    AC_DEFINE(INC_NCURSES)])], [
			   AC_MSG_ERROR(Termcap library not found)])])
AC_SUBST(TERMCAP_LIB)

dnl Check for readline
AC_CHECK_LIB(readline,readline, [READLINE_LIB="-lreadline"],
	     AC_MSG_ERROR(Readline library not found),
	     $TERMCAP_LIB)
AC_SUBST(READLINE_LIB)

GMP_LIB=""
AC_CHECK_LIB(gmp, __gmpz_init_set,[GMP_LIB=-lgmp], [
	AC_CHECK_LIB(gmp2, __gmpz_init_set_d,[GMP_LIB=-lgmp2
		AC_DEFINE(HAVE_GMP2_INCLUDE_DIR)],
		AC_MSG_ERROR(GMP Library not found))])
AC_SUBST(GMP_LIB)

MPFR_LIB=""
AC_CHECK_LIB(mpfr, mpfr_init,[
	MPFR_LIB=-lmpfr
	AC_DEFINE(HAVE_MPFR)], [
	AC_MSG_WARN([*** MPFR Library not found ***])],"$GMP_LIB")
AC_SUBST(MPFR_LIB)

# No schemas yet so ignore this section for now
#AC_PATH_PROG(GCONFTOOL, gconftool-2)
#dnl Specify the gconf configuration source,
#dnl default to xml::$(sysconfdir)/gconf/gconf.xml.defaults
#
#GCONF_CONFIG_SOURCE=
#
#AC_ARG_ENABLE(gconf-source, [  --enable-gconf-source=sourceaddress Where to install schema files.], GCONF_CONFIG_SOURCE=$enable_gconf_source,)
#if test "x$GCONF_CONFIG_SOURCE" = "x"; then
#        GCONF_CONFIG_SOURCE="xml::\${sysconfdir}/gconf/gconf.xml.defaults"
#fi
#
#AC_SUBST(GCONF_CONFIG_SOURCE)
#AC_SUBST(INSTALL_GCONF_CONFIG_SOURCE)

AC_ARG_ENABLE(gtksourceview,
[  --disable-gtksourceview	Do not use GtkSourceView library even if detected],
use_gtksourceview="$enableval",use_gtksourceview=yes)

AC_ARG_ENABLE(gnome,
[  --disable-gnome	Compile without the GNOME frontend (no GUI, no plotting)],
use_gnome="$enableval",use_gnome=yes)

# Used for the 'genius' binary
PKG_CHECK_MODULES(GENIUS_NOGUI, glib-2.0 >= $GLIB_REQUIRED gmodule-2.0 >= $GLIB_REQUIRED)
AC_SUBST(GENIUS_NOGUI_CFLAGS)
AC_SUBST(GENIUS_NOGUI_LIBS)

GENIUS_MODULES="gtk+-2.0 >= $GTK_REQUIRED libgnome-2.0 >= $LIBGNOME_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED vte >= $VTE_REQUIRED gtksourceview-1.0 >= $GTKSOURCEVIEW_REQUIRED libglade-2.0 >= $LIBGLADE_REQUIRED"
GENIUS_MODULES_NOSRCVIEW="gtk+-2.0 >= $GTK_REQUIRED libgnome-2.0 >= $LIBGNOME_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED vte >= $VTE_REQUIRED libglade-2.0 >= $LIBGLADE_REQUIRED"

if test "x$use_gnome" = "xyes" ; then
  echo " 
Testing for presence of GNOME and GtkSourceView:
Note:
      You can compile without GNOME by using the --disable-gnome option
"
  if test "x$use_gtksourceview" = "xyes" ; then
    PKG_CHECK_MODULES(GENIUS, $GENIUS_MODULES,
		      AC_DEFINE(HAVE_GTKSOURCEVIEW),
		      [use_gtksourceview=no
		       PKG_CHECK_MODULES(GENIUS, $GENIUS_MODULES_NOSRCVIEW)])
   # FIXME: warn if not compiled
  else
    PKG_CHECK_MODULES(GENIUS, $GENIUS_MODULES_NOSRCVIEW)
  fi

  VICIOUS_MODULES="gtk+-2.0 >= $GTK_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED libglade-2.0 >= $LIBGLADE_REQUIRED"
  VICIOUS_GNOME_LIBS="libviciousui.a libviciousui-gnome.a libviciousui-minimal.a libvicious-gnome.a"
  
  GNOME_GENIUS=gnome-genius
  GENIUS_READLINE_HELPER_FIFO=genius-readline-helper-fifo
  GNOME_GENIUS_DESKTOP_IN="gnome-genius.desktop.in"

else
  use_gtksourceview=no
  VICIOUS_MODULES="glib-2.0 >= $GLIB_REQUIRED gmodule-2.0 >= $GLIB_REQUIRED"
  VICIOUS_GNOME_LIBS=
  GENIUS_CFLAGS="$GENIUS_NOGUI_CFLAGS"
  GENIUS_LIBS="$GENIUS_NOGUI_LIBS"
  GNOME_GENIUS=
  GENIUS_READLINE_HELPER_FIFO=
  GNOME_GENIUS_DESKTOP_IN=
fi

AC_SUBST(VICIOUS_GNOME_LIBS)
AC_SUBST(GENIUS_CFLAGS)
AC_SUBST(GENIUS_LIBS)
AC_SUBST(GNOME_GENIUS)
AC_SUBST(GENIUS_READLINE_HELPER_FIFO)
AC_SUBST(GNOME_GENIUS_DESKTOP_IN)

# This is used for vicious-extensions
PKG_CHECK_MODULES(VICIOUS, $VICIOUS_MODULES)
AC_SUBST(VICIOUS_CFLAGS)
AC_SUBST(VICIOUS_LIBS)

AC_CHECK_LIB(popt, poptGetArgs, [POPT_LIBS="-lpopt"],
AC_MSG_ERROR([popt is required to build genius.
You can download the latest version from ftp://ftp.rpm.org/pub/rpm/dist/rpm-4.0.x/]))
AC_SUBST(POPT_LIBS)

dnl ******************************
dnl More compiler warnings
dnl ******************************

AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
if test -f $srcdir/CVS/Root; then
	is_cvs_version=true
	set_more_warnings=yes
else
	set_more_warnings=no
fi
])
warning_flags=
realsave_CFLAGS="$CFLAGS"
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	AC_MSG_RESULT(yes)
	warning_flags="-Wall -Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Werror"
	CFLAGS="$warning_flags $CFLAGS"

	for option in -Wsign-promo -Wno-sign-compare; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$CFLAGS $option"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		CFLAGS="$SAVE_CFLAGS"
		AC_MSG_RESULT($has_option)
		if test $has_option = yes; then
		  warning_flags="$warning_flags $option"
		fi
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
else
	AC_MSG_RESULT(no)
fi
CFLAGS="$realsave_CFLAGS"
EXTRA_WARNING_CFLAGS=" \
	$warning_flags"
#	-DG_DISABLE_DEPRECATED \
#	-DGDK_PIXBUF_DISABLE_DEPRECATED \
#	-DGDK_DISABLE_DEPRECATED \
#	-DGTK_DISABLE_DEPRECATED \
#	-DGNOME_DISABLE_DEPRECATED \

AC_SUBST(EXTRA_WARNING_CFLAGS)

dnl wordexp check, we use glob otherwise but that's not perfect
dnl warn the user, we do this on the end so that the user notices
AC_CHECK_FUNC(wordexp,AC_DEFINE(HAVE_WORDEXP),
  	      [AC_MSG_WARN([*** You don't have wordexp, glob will be used instead ***])])


AC_OUTPUT([
genius.spec
Makefile
src/Makefile
doc/Makefile
lib/Makefile
lib/calculus/Makefile
lib/combinatorics/Makefile
lib/equation_solving/Makefile
lib/functions/Makefile
lib/linear_algebra/Makefile
lib/misc/Makefile
lib/sets/Makefile
lib/number_theory/Makefile
lib/statistics/Makefile
vicious-extensions/Makefile
po/Makefile.in
])

if test "x$MPFR_LIB" = x; then
   GOT_MPFR="no"
else
   GOT_MPFR="yes"
fi

echo "
Configuration:

	Source code location:	  ${srcdir}
	Compiler:		  ${CC} 
	Using the MPFR library:   ${GOT_MPFR}
	GNOME frontend:		  ${use_gnome}
	Using GtkSourceView:	  ${use_gtksourceview}

	Extra Compiler Warnings:  ${EXTRA_WARNING_CFLAGS}
"

if test "x$MPFR_LIB" = x; then
  echo " 
WARNING:
     You are compiling without the MPFR library and genius will then use
     it's own implementations for things like exp, ln, pow, sin, and such
     but these are very slow.  Please use a gmp library compiled with
     --enable-mpfr, or get and compile the mpfr library from www.mpfr.org
"
fi
