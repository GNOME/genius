## Some combinatorial functions

# Subfactorial
# Subfactorial(n)=n! times \sum_{k=1}^n (-1)^k/k!
# This is the number of permutations of n objects that leaves none of the
# objects unchanged.

SetHelp("catalan","combinatorics","Get n'th catalan number");
function catalan(n) = (
	if(is_matrix(n)) then
		return ApplyOverMatrix(n,catalan)
	else if(not is_value(n) or not is_integer(n) or n<0) then
		(error("catallan: argument not an integer >= 0");bailout);
	nCr(2*n,n)/(n+1)
);
protect("catalan")

## Double Factorial
## Defined by n!! = n(n-2)(n-4)...
# FIXME: make builtin!
function DoubleFactorial(n) =
	(error("DoubleFactorial: Not yet implemented");bailout;)

## (Puchhammer) Rising factorial: (n)_k = n(n+1)...(n+(k-1))
function RisingFactorial(n,k) =
 (
  if is_integer(n) then return (n+k-1)!/(n-1)!
  else
   (
   # Return trivial values
    product=1;
   # Compute non-trivial values
    for i=0 to (k-1) do
    product=product*(n+i);
    return product
  );
 )
protect("RisingFactorial");
rising_factorial = RisingFactorial;
protect("rising_factorial");
Puchhammer = RisingFactorial;
protect("Puchhammer");

# Falling factorial: (n)_k = n(n-1)...(n-(k-1))
function FallingFactorial(n,k) =
(
  if is_integer(n) then return (n)!/(n-k)!
  else
   (
   # Return trivial values
    product=1;
   # Compute non-trivial values
    for i=0 to (k-1) do
    product=product*(n-i);
    return product
   );
)
protect("FallingFactorial");
falling_factorial=FallingFactorial;
protect("falling_factorial");

## Binomial Coefficients

SetHelp("nPr","combinatorics","Calculate permutations");
function nPr(n,r) = (
	if(is_matrix(n) or is_matrix(r)) then
		return ApplyOverMatrix2(n,r,nPr)
	else if(not is_real(n) or not is_integer(r)) then
		(error("nPr: arguments not real and an integer");bailout)
	else if(r<0 or n<0 or r>n) then
		0
	else if(is_integer(n)) then
		(n!)/((n-r)!)
	else (
		ret = 1;
		i=0;
		while(i<r) do (
			ret = ret*(n-i);
			i = i+1
		);
		ret
	)
);
protect("nPr")

SetHelp("nCr","combinatorics","Calculate combinations");
function nCr(n,r) = (
	if(is_matrix(n) or is_matrix(r)) then
		return ApplyOverMatrix2(n,r,nCr)
	else if(not is_real(n) or not is_integer(r)) then
		(error("nCr: arguments not real and an integer");bailout)
	else if(r<0 or n<0 or r>n) then
		0
	else if(is_integer(n)) then
		(n!)/(r!*(n-r)!)
	else (
		ret = 1;
		i=0;
		while(i<r) do (
			ret = ret*(n-i);
			i = i+1
		);
		ret/(r!)
	)
);
protect("nCr")
Binomial=nCr;
protect("Binomial");

## Multinomial Coefficients
## Multinomial([a,b,c])=(a+b+c)!/a!b!c!
function Multinomial(v) = matsum(v)!/matprod(ApplyOverMatrix(v,`(x)=x!))
protect("Multinomial");

SetHelp("pascal","combinatorics","Get the pascal's triangle as a matrix");
function pascal(i) = (
	if not is_integer(i) then
		(error("pascal: argument not an integer");bailout)
	else if i<0 then
		(error("pascal: argument is negative");bailout);
	m = SetMatrixSize ([0],i+1,i+1);
	for y = 0 to i do (
		for x = 0 to y do (
			m@(y+1,x+1) = nCr(y,x)
		)
	);
	m
);
protect("pascal")

SetHelp("triangular", "combinatorics", "Calculate the nth triangular number");
function triangular(nth) = (
        if is_matrix(nth) then
                return ApplyOverMatrix(nth, triangular)
	else if not is_integer(nth) or not nth>=0 then
		(error("trianglular: argument not an integer larger then or equal to 0");bailout);
	(nth*(nth+1))/2
);
protect("triangular")
