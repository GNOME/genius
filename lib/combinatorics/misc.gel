# Miscellaneous Combinatorial functions

# Hofstadter's function q(n) is defined for positive integers by
# q(1)=1, q(2)=1, q(n)=q(n-q(n-1))+q(n-q(n-2))
# Note: the Hofstadter function is described in Godel, Escher, Bach:
# An Eternal Golden Braid.
# It's kinda chaotic (and becomes increasingly so) -- it starts off
# looking like n/2 or such...
SetHelp("Hofstadter", "combinatorics", "Hofstadter's function q(n) defined by q(1)=1, q(2)=1, q(n)=q(n-q(n-1))+q(n-q(n-2))")
function Hofstadter(n) = (
    if not IsInteger(n) or n < 1 then
    	(error("Hofstadter: argument not a positive integer");bailout);
    # reason for doing this is that it's just plain faster then calling self
    # again
    function _h (n) = (
    	if n <= 2 then
		1
	else
		_h(n - _h(n-1)) + _h(n - _h(n-2))
    );
    _h (n)
)

protect("Hofstadter");

# return the fibbonachi number, calculated using an iterative method
SetHelp("Fibbonachi", "combinatorics", "Calculate n'th fibbonachi number");
function Fibbonachi(x) = (
	if(IsMatrix(x)) then
		return ApplyOverMatrix(x,fib)
	else if(not IsInteger(x)) then
		(error("Fibbonachi: argument not an integer");bailout)
	else if(x<0) then
		(error("Fibbonachi: argument less than zero");bailout)
	else (([1,1;1,0]^x)@(1,2))
);
protect("Fibbonachi")
SetHelpAlias ("Fibbonachi", "fib");
fib=Fibbonachi
protect("fib")

## Harmonic Numbers
## H_n^(r) (the nth harmonic number of order r)
## = sum_{i=1}^n 1/i^r
SetHelp("HarmonicNumber", "combinatorics", "Harmonic Number, the nth harmonic number of order r");
function HarmonicNumber(n,r) = sum x=1 to n do x^(-r)
protect("HarmonicNumber");
SetHelpAlias ("HarmonicNumber", "HarmonicH");
HarmonicH = HarmonicNumber;
protect("HarmonicH");

## More: BernoulliNumber, BernoulliPolynomial,
## EulerNumber, EulerPolynomial, StirlingNumberFirst (of the first kind)
## StirlingNumber2 (of the second kind)
#function BernoulliB(n) = BernoulliNumber(n)
#function BernoulliB(n,x) = BernoulliPolynomial(n,x)
#function EulerE(n) = EulerNumber(n)
#function EulerE(n,x) = EulerPolynomial(n,x)
#function StirlingS1(n,m) = SterlingNumberFirst(n,m) #S_n^(m)
#function StirlingS2(n,m) = SterlingNumberSecond(n,m) #S_n^(m)
#function PartitionsP(n) = PartitionsUnrestricted(n) # Unrestricted partitions of n
#function PartitionsQ(n) = PartitionsDistinct(n) # Partitions of n into distinct parts

# Partity (of a permutation)
# ClebschGordan, ThreeJSymbol, SixJSymbol
