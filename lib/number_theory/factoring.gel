# Factoring

# FIXME: The first output column gets corrupted sometimes
# FIXME!
# Implement (in order of importance)
# (might want to have a separate procedure that just does
#  mid-size algorithms a bunch of times, then another one that
#  does big ones a bunch of times)
# (2) Pollard Rho
# (3) Pollard p-1
# (4) Quadratic Sieve (QS) (start at 18-20 digits)
# (5) Elliptic Curve Method (ECM) (use from 8 digits to 25-30)
# (6) Continued Fraction Algorithm (CFRAC) -- not actually useful, but
#	a nice legacy addition
SetHelp("Factorize", "number_theory", "Return factorization of a number as a matrix")
function Factorize(n) =
 (
  if not IsInteger(n) then
  	(error("Factorize: argument not an integer");bailout);
  # First, deal with trivial case (n=0) and get rid of the possible unit.
  if (n==0) then return [0;1];
  if (n<0) then (n=-n; factor_list=[-1;1];) else factor_list=[1;1];
    # (1) Small primes via trial division
    # First, check if it's divisible by 2 or 3
    # FIXME: this repeated code should be done by an internal function
    if Divides(2,n) then
     (
      valuation=PadicValuation(n,2);
      factor_list=[factor_list,[2;valuation]];
      n=n/(2^valuation);
     );

    if Divides(3,n) then
     (
      valuation=PadicValuation(n,3);
      factor_list=[factor_list,[3;valuation]];
      n=n/(3^valuation);
     );
    # Next, loop through all number between 5 and FactorizeLoopMax
    # that = 1, 5 mod 6 (as in IsPrime).
    loop=5;
    do
     (
      if Divides(loop,n) then
       (
        valuation=PadicValuation(n,loop);
        factor_list=[factor_list,[loop;valuation]];
        n=n/(loop^valuation);
       );
      loop=loop+2;
      if Divides(loop,n) then
       (
        valuation=PadicValuation(n,loop);
        factor_list=[factor_list,[loop;valuation]];
        n=n/(loop^valuation);
       );
      loop=loop+4;
     ) while (loop<=FactorizeLoopMax) and (n != 1);

  # If we're done, rejoice!
  if (n==1) then return factor_list;
  if (IsPrime(n)) then return [factor_list,[n;1]];

  # FIXME: Perhaps the 100000 should be configurable, in any case,
  # we should use better factorization methods
  fem = FermatFactorization (n, 100000);
  if IsMatrix(fem) then (
    a = fem@(1)-fem@(2);
    b = fem@(1)+fem@(2);
    if not IsPrime(a) or not IsPrime(a) then (
      # If not, return the partial factorization and flag an error
      error("Sorry, number has factors that are too big for us to deal with yet; the following is a partial factorization (the last term is composite).");
    );
    return [factor_list,[a;1],[b;1]];
  );

  # If not, return the partial factorization and flag an error
  error("Sorry, number has factors that are too big for us to deal with yet; the following is a partial factorization (the last term is composite).");
  return [factor_list,[n;1]];
 )
protect ("Factorize")

SetHelp("FactorizeLoopMax","parameters","Maximum number which Factorize uses in trial division");
# FIXME: after Factorize is smarter reduce this again
parameter FactorizeLoopMax = 50000;         # Factorize configuration variable

SetHelp("PrimeFactors", "number_theory", "Return all prime factors of a number")
function PrimeFactors (n) = (
	if not IsPositiveInteger(n) then
		(error("PrimeFactors: argument not an integer larger then 0");bailout);
	if n == 1 then return null;

	fac = Factorize(n);
	if IsNull(fac) then return null;

	fac@(1,2:columns(fac))
)
protect("PrimeFactors")

SetHelp("MaximalPrimePowerFactors", "number_theory", "Return all maximal prime power factors of a number")
function MaximalPrimePowerFactors (n) = (
	if not IsPositiveInteger(n) then
		(error("MaximalPrimePowerFactors: argument not an integer larger then 0");bailout);
	if n == 1 then return null;

	fac = Factorize(n);
	if IsNull(fac) then return null;

	for k=2 to columns(fac) do
		fac@(1,k) = fac@(1,k)^fac@(2,k);

	fac@(1,2:columns(fac))
)
protect("MaximalPrimePowerFactors")

# given two factorizations, returns factorization of the product
# (useful for factoring rational numbers, for instance)
SetHelp ("CombineFactorizations", "number_theory", "Given two factorizations, give the factorization of the product, see Factorize")
function CombineFactorizations(a,b) = (
  if not IsMatrix(a) or not IsMatrix(b) or rows(a) != 2 or rows(b) != 2 then
  	(error("CombineFactorizations: arguments not factorizations");bailout);

  # multiplication by 0
  if a@(1,1) == 0 or b@(1,1) == 0 then
	return [0;1];

  combined = [a@(1,1)*b(1,1);1];

  n=2;
  k=2;
  l=2;
  while k <= columns(a) or l <= columns(b) do (
    if k > columns(a) or a@(1,k) > b@(1,l) then (
      combined@(1,n) = a@(1,l);
      combined@(2,n) = a@(2,l);
      l = l+1
    ) else if l > columns(b) or a@(1,k) < b@(1,l) then (
      combined@(1,n) = a@(1,k);
      combined@(2,n) = a@(2,k);
      k = k+1
    ) else if a@(1,k) == b@(1,l) then (
      combined@(1,n) = a@(1,k);
      combined@(2,n) = a@(2,k) + b@(2,k);
      k = k+1;
      l = l+1
    );
    n = n+1;
  );
  combined
)
protect ("CombineFactorizations")

# Returns all factors of n, i.e., all numbers between 1 and n that divide
# n.
# FIXME: this is a naive implementation. Better would be to compute
# the prime factorization for n and then combine it in all possible ways.
SetHelp("Factors", "number_theory", "Return all factors of a number")
function Factors(n) =
 (
  if not IsInteger(n) then
  	(error("Factors: argument not an integer");bailout);
  if n == 0 then return null;

  front_list=[0];
  back_list=[0];

  if n < 0 then (
    n = -n;
    front_list=[0,-1]
  );

  for loop = 1 to floor(sqrt(n-1)) do
   (
    if Divides(loop,n) then
     (
      front_list=[front_list,loop];
      back_list=[n/loop,back_list]
     )
   );

  if IsPerfectSquare(n) then
    r = [front_list,sqrt(n),back_list]
  else
    r = [front_list,back_list];
  r@(2:elements(r)-1)
 )
protect("Factors")

SetHelp("FermatFactorization", "number_theory", "Attempt fermat factorization of n into (t-s)*(t+s), returns t and s if possible, null otherwise")
function FermatFactorization(n,tries) = (
  if not IsPositiveInteger(n) or not IsPositiveInteger(tries) then
  	(error("FermatFactorization: arguments not positive integers");bailout);
  t = floor(sqrt(n));
  for i=1 to tries do (
    t = t+1;
    m = t^2 - n;
    s = sqrt(m);
    if IsInteger (s) then return [t,s];
  );
  null
)
protect("FermatFactorization")
