# Miscellaneous number theory functions

function IsNthPower(n,k) =
 (
  if not IsRational (n) then
	# Only integers/rationals can be perfect powers
	0
  else if k == 2 then
	IsPerfectSquare(n)
  else if not IsPerfectPower(n) then
	# We know this won't work
	0
  else if IsInteger(n) then
	IsInteger(n^(1/k))

  # Since rational numbers are in reduced form, by unique factorization it
  # suffices to check if the numerator and denominator are Nth powers
  else
	(IsNthPower(Numerator(n),k)) and IsNthPower(Denominator(n),k)
 )
SetHelp("IsNthPower","number_theory","Tests if a rational number is a perfect power");
protect("IsNthPower");

function Divides(m,n) = not n % m;
SetHelp("Divides","number_theory","Checks divisibility (if m divides n)");
protect("Divides");

# Returns the highest power of p that divides n, where n is rational.
# FIXME: This is only a valuation if p is prime, so this is an abuse
# of language.
function PadicValuation(n,p) =
 (
  if IsRational(n) and not IsInteger(n) then
    return PadicValuation(Numerator(n))-PadicValuation(Denominator(n));
  if not IsInteger(n) then
   (
    error("PadicValuation: argument must be rational or integer");
    bailout;
   );
#  if (n==0) then return Infinity; # FIXME: Infinity not yet implemented
  if (n==0) then return null;

  valuation=0;
  while Divides(p,n) do
   (
    valuation=valuation+1;
    n=n/p;
   );
  return valuation;
 )
SetHelp("PadicValuation","number_theory","Returns the padic valuation (number of trailing zeros in base p).");
protect("PadicValuation");

function RemoveFactor(n,m) =
 (
  if not IsInteger(n) or not IsInteger(m) then
   (
    error("RemoveFactor: arguments must be integers");
    bailout;
   );
  if (n==0) then return 0;

  while Divides(m,n) do
   (
    n=n/m;
   );
  return n;
 )
SetHelp("RemoveFactor","number_theory","Removes all instances of the factor m from the number n");
protect("RemoveFactor");

function PowerMod(a,b,m) = a^b mod m
SetHelp("PowerMod","number_theory","Compute a^b mod m");
protect("PowerMod");

function AreRelativelyPrime(a,b) = (gcd(a,b) == 1)
SetHelp("AreRelativelyPrime","number_theory","Are a and b relatively prime?");
protect("AreRelativelyPrime");

function LeastAbsoluteResidue(a,n) = (
  	if not IsInteger(a) or not IsPositiveInteger(n) then
	   (
	    error("LeastAbsoluteResidue: arguments must be integers");
	    bailout;
	   );
	b = a mod n;
	if (-b+n) < b then
		b-n
	else
		b
)
SetHelp("LeastAbsoluteResidue", "number_theory", "Return the residue of a mod n with the least absolute value (in the interval -n/2 to n/2)");
protect("LeastAbsoluteResidue");

SetHelp("ChineseRemainder", "number_theory", "Find the x that solves the system given by the vector a and modulo the elements of m, using the Chinese Remainder Theorem");
function ChineseRemainder(a,m) = (
  M=MatrixProduct(m);
  ( sum i=1 to elements(a) do (
      Mi = (M/m@(i));
      a@(i)*Mi*(Mi^-1 mod m@(i))
    )
  ) % M
)
protect("ChineseRemainder");
SetHelpAlias ("ChineseRemainder", "CRT")
CRT = ChineseRemainder
protect("CRT")

SetHelp("ConvertToBase", "number_theory", "Convert a number to a vector of powers for elements in base b");
function ConvertToBase(n,b) = (
  if not IsInteger(n) or n < 0 or not IsInteger(b) or b <= 1 then
   (
    error("ConvertToBase: arguments must be integers with n >= 0 and b > 1");
    bailout;
   );
  ret = null;
  while n != 0 do (
    r = n % b;
    n = (n-r)/b;
    ret = [ret;r];
  );
  ret
)
protect("ConvertToBase");

SetHelp("ConvertFromBase", "number_theory", "Convert a vector of values indicating powers of b to a number");
function ConvertFromBase(v,b) = (
  n = 0;
  if not IsMatrix(v) or not IsInteger(b) or b <= 1 then
   (
    error("ConvertFromBase: bad arguments");
    bailout;
   );
  for i=1 to elements(v) do
    n = n + v@(i)*b^(i-1);
  n
)
protect("ConvertFromBase");
